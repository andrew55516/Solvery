// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
)

const addUserCredit = `-- name: AddUserCredit :one
UPDATE users SET credit = credit + $1 WHERE email = $2 RETURNING name, class, email, credit, created_at
`

type AddUserCreditParams struct {
	Amount int32  `json:"amount"`
	Email  string `json:"email"`
}

func (q *Queries) AddUserCredit(ctx context.Context, arg AddUserCreditParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUserCredit, arg.Amount, arg.Email)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Class,
		&i.Email,
		&i.Credit,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, class, email) VALUES ($1, $2, $3) RETURNING name, class, email, credit, created_at
`

type CreateUserParams struct {
	Name  string `json:"name"`
	Class string `json:"class"`
	Email string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Class, arg.Email)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Class,
		&i.Email,
		&i.Credit,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT name, class, email, credit, created_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Class,
		&i.Email,
		&i.Credit,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
select name, class, email, credit, created_at from users limit $1 offset $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Name,
			&i.Class,
			&i.Email,
			&i.Credit,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
